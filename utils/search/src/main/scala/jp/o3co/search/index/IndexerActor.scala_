
/**
 * IndexerActor is an actor to update index of the documents.
 */
trait IndexerActorLike {
  this: Actor

  var latest: Option[Long] = None 

  def schedule() = scheduler.schedule(, IndexSince(latest)

  def documentStore: ActorSelection 

  def engine: SearchEngine[T]

  case class State(offset: Long = 0, latest: Option[Long] = latest, tried: Int = 0, maxRetries: Int = 0) {
    def incrementRetry: State = 
      if(tried >= maxRetries) {
        throw new MaxRetriesExceededException(s"Reach Max Retries(tried = $tried).")
      } else {
        copy(tried = tried + 1)
      }
  }

  def receiveCommand = {
    case ReIndex => 
      // ReIndex all documents
      context.become(receiveWhileIndexing)
      state = State()
      documentStore ! ListSinceLatestModified(perSize, state.offset, state.latest)
    case IndexSince(lastModified) => 
      context.become(receiveWhileIndexing)
      // initialize
      state = State()
      // 
      documentStore ! ListSinceLatestModified(perSize, state.offset, state.latest)
  }

  def receiveWhileIndexing = {
    case e: Indexing => 
      // drop request 
      log.info("Previous indexing is still on running. Please retry later.")
    case ListSinceLatestModifiedComplete(documents, latest) => 
      if(documents.empty) {
        // no more documents
        self ! IndexComplete(state.latest)
      } else {
        engine.index(documents)
          .onComplete {
            case Success(res) => 
              // Update current state
              state = state.copy(offset = offset + documents.size, tried = 0, latest = latest)
              
              documentStore ! ListSinceLatestModified(requestPerSize, state.offset, latestModified)
            case Failure(e) => 
              try {
                state = state.incrementRetry
                documentStore ! ! ListSinceLatestModified(requestPerSize, state.offset, latestModified)
              } catch {
                case e: Throwable => self ! IndexFailure(e)
              }
          }
      }
    case IndexFailure(e) => 
      log.error("Failed to index documents", e)
      context.unbecome()
    case IndexComplete(latest) => 
      latestModified = Option(latest)
      context.unbecome()
  }
}

package jp.o3co.aws
package cloudsearch
package query

trait Query {
  def query: String

  def parser: QueryParser

  def options: QueryOptions = QueryOptions()

  override def toString: String = query

  def toRequest: SearchRequest = SearchRequest(this)
}

sealed abstract class AbstractQuery(val parser: QueryParser) extends Query

case class SimpleQuery(query: String, override val options: QueryOptions = QueryOptions()) extends AbstractQuery(QueryParser.Simple)

case class LuceneQuery(query: String, override val options: QueryOptions = QueryOptions()) extends AbstractQuery(QueryParser.Lucene)

case class StructuredQuery(query: String, override val options: QueryOptions = QueryOptions()) extends AbstractQuery(QueryParser.Structured)

/**
 * Helper to query structured query 
 * 
 * {{{
 *   val query: QueryCondition = or("'star'", or("genre:'drama'", "genre:'action'"))
 *   // "(and 'star' (or genre:'drama' genre:'action'))"
 * }}}
 */
trait StructuredQueryHelper {
  implicit val queryParser = StructuredQueryParser

  /**
   *
   */
  implicit def stringToLiteral(literal: String)      = Literal(literal)

  implicit def anyToValueExpression[T](value: T)     = ValueExpression[T](value)

  implicit def stringToFieldExpression(name: String) = FieldExpression(name)

  def or(conditions: Expression *)  = OrOperator(conditiond)
  def and(conditions: Expression *) = AndOperator(conditions)
  def not(condition: Expression)    = NotOperator(condition)

  def matchall = MatchAll

  /**
   * {{{
   *   term("title", "star")
   *   // (term field=title 'star')
   * }}}
   */
  def term[T](field: String, value: T, boost: Option[Int] = None) = 
    Term(field, value, boost)

  /**
   *
   */
  def phrase(field: String, value: String, boost: Option[Int] = None) = 
    Phrase(field, value, boost)

  /**
   *
   */
  def near(field: String, distance: Int, value: String, boost: Option[Int] = None) = 
    Near(field, distance, value, boost)

  /**
   *
   */
  def range[T](field: String, min: Option[T], max: Option[T], boost: Option[Int] = None) = 
    Range(field, min, max, boost)
}

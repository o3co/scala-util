

trait CloudSearchImpl extends Searcher {

  def getIndexer: ActorRef
}

class CloudSearchActor extends SearcherActor with CloudSearchImpl {

  val indexer = actorOf(CloudSearchIndexer)

  def getIndexer: ActorPath = indexer

  /**
   * QueryBuilder for FilterCondition and SortCondition
   */
  implicit val queryBuilder = QueryBuilder()

  def search(size, offset, filter, sort) = {

    val query = queryBuilder
      // Create Query from filter condition
      .buildQuery(MatchAll)
      .setFilterQuery(queryBuilder.buildFilterQuery(filter))
      .addOption(
        
      )
  }

  def receive = {
    case GetIndexer =>
      sender ! GetIndexerComplete(getIndexer)
    case Search(size, offset, filter, sort) => 
      search(size, offset, filter, sort)
        .map { ids => 
          SearchComplete(ids)
        }
        .recover {
          case e: Throwable => SearchFailure(e)
        }
        .pipeTo(sender)
  }
}

